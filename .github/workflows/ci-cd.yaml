name: Deploy to EKS

on:
  push:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI and configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

     # Step 4: Build and push the backend Docker image to ECR
      - name: Build, tag, and push backend image
        run: |
          docker build -t backend:latest ./backend
          docker tag backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-eks-deploy-pod-detail-app-backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-eks-deploy-pod-detail-app-backend:latest
      
      # Step 5: Build and push the frontend Docker image to ECR
      - name: Build, tag, and push frontend image
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-eks-deploy-pod-detail-app-frontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-eks-deploy-pod-detail-app-frontend:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest

    # Define the steps to be executed in the job
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up kubectl
      - uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.1'

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      # Step 4: Configure kubectl for the EKS cluster
      - name: Configure kubectl for EKS
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      # Step 5: Deploy the backend to EKS
      - name: Deploy backend to EKS
        run: |
          kubectl apply -f ./kubernetes/backend-deployment.yaml 
          kubectl apply -f ./kubernetes/backend-service.yaml

      # Step 6: Deploy the frontend to EKS
      - name: Deploy frontend to EKS
        run: |
          kubectl apply -f ./kubernetes/frontend-deployment.yaml 
          kubectl apply -f ./kubernetes/frontend-service.yaml

      # Step 7: Deploy Nginx to EKS
      - name: Deploy Nginx to EKS
        run: |
          kubectl apply -f ./kubernetes/nginx-deployment.yaml 
          kubectl apply -f ./kubernetes/nginx-service.yaml



